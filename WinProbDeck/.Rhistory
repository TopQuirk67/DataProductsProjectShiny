col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
pbeta0
pBeta0
pBeta1
coefTable
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
summary(fit)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
t
x
summary(fit)
fit2<-lm(y~x+t)
summary(fit2)
fit2<-lm(y~x)
summary(fit2)
fit2<-lm(y~t)
summary(fit2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2, -1, 1), runif(n/2, -1, 1));
beta0 <- 0; beta1 <- 2; tau <- 0; tau1 <- -4; sigma <- .2
y <- beta0 + x * beta1 + t * tau + t * x * tau1 + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t + I(x * t))
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
summary(fit)
data(mtcars)
fit<-lm(mpg ~ .,data=mtcars)
plot(fit)
data(mtcars); par(mfrow=c(2,2))
fit<-lm(mpg ~ .,data=mtcars)
plot(fit)
head(mtcars)
summary(fit)
?mtcars
mtcars2<-mtcars
mtcars2$cyl<-factor(mtcars2$cyl)
mtcars2$am<-factor(mtcars2$am)
mtcars2$gear<-factor(mtcars2$gear)
mtcars2$vs<-factor(mtcars2$vs)  # v engine or straight engine
mtcars2$carb<-factor(mtcars2$carb)
fitf<-lm(mpg ~ .,data=mtcars)
summary(fitf)
fitf<-lm(mpg ~ .,data=mtcars2)
summary(fitf)
plot(fitf)
influence.measures(fit)
influence.measures(fit)$hatvalues
?influence.measures
hatvalues(fit)
plot(fit)
sort(hatvalues(fit))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5<-lm(y~x)
hatvalues(fit)
hatvalues(fit5)
dfbetas(fit5)
par(mfrow=c(1,1))
plot(x,y)
fit2 <- lm(mpg ~ I(as.factor(cyl)) ,data=mtcars)
summary(fit2)
#3  Whoa...
fit3 <- lm(mpg ~ I(as.factor(cyl)) + wt + I(as.factor(cyl))*wt  ,data=mtcars)
summary(fit3)
anova(fit2,fit3)
fit3a <- lm(mpg ~ I(as.factor(cyl)) + wt   ,data=mtcars)
fit3b <- lm(mpg ~ I(as.factor(cyl)) + wt + I(as.factor(cyl))*wt  ,data=mtcars)
summary(fit3a)
summary(fit3b)
anova(fit3a,fit3b)
n <- 100; nosim <- 10000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
x1 <- rnorm(n)
y <- x1 + rnorm(n, sd = .3)
plot(x,y)
plot(x1,y)
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
temp <- apply(betas, 1, var); temp[2 : 3] / temp[1]
summary(lm(y~x1))
summary(lm(y~x1))$cov.unscaled
data(mtcars);
fit<-lm(mpg ~ .,data=mtcars)
summary(fit)
?anova
?step
fit.parsimonious<-lm(mpg ~ am + wt + cyl + hp, data=mtcars)
summary(fit.parsimonious)
library(ggplot2)
library(gridExtra)
data(mtcars);
mtcarsorig <- mtcars
mtcars$cyl<-factor(mtcars$cyl)
mtcars$am<-factor(mtcars$am); levels(mtcars$am)<-c("Automatic","Manual")
mtcars$gear<-factor(mtcars$gear)
mtcars$vs<-factor(mtcars$vs); levels(mtcars$vs)<-c("V","Straight")
mtcars$carb<-factor(mtcars$carb)
fit.parsimonious<-lm(mpg ~ am + wt + cyl + hp, data=mtcars)
fit.parsimonious
summary(fit.parsimonious)
summary(fit.parsimonious)$coeff
summary(fit.parsimonious)$coeff.Estimate
summary(fit.parsimonious)$coeff.Estimates
summary(fit.parsimonious)$coeff[1]
summary(fit.parsimonious)$coeff[2]
summary(fit.parsimonious)$coeff[2,]
summary(fit.parsimonious)$coeff[2,1]
summary(fit.parsimonious)$coeff[2,4]
round(summary(fit.parsimonious)$coeff[6,4],4)
summary(fit.parsimonious)
round(summary(fit.parsimonious)$coeff[3,4],4)
round(summary(fit.parsimonious)$coeff[6,4],4)
summary(fit.parsimonious)
summary(fit.parsimonious)$"Multiple R-squared"
str(fit.parsimonious)
round(summary(fit.parsimonious)$r.squared,4)
round(100*(summary(fit.parsimonious)$r.squared,2))
round(100*(summary(fit.parsimonious)$r.squared),2)
library(swirl)
ls()
getwd()
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(2014,"REG",17)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots
splineTerms
summary(yhat)
summary(lm(y~xMAt-1))
summary(lm(y~xMat-1))
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 4 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y~xMat-1))
library(MASS)
head(shuttle)
shuttle$usenum<-shuttle$use==auto
shuttle$usenum<-shuttle$use=="auto"
head(shuttle)
shuttle$usenum<-as.numeric(shuttle$use=="auto")
head(shuttle)
shuttle$windnum<-as.numeric(shuttle$wind=="head")
head(shuttle)
table(shuttle$usenum,shuttle$windnum)
fit<-glm(usenum ~ windnum,data=shuttle,family=binomial)
fit
summary(fit)
summary(fit)$coeff
fit$coeff
exp(fit$coeff)
head(shuttle)
fit2<-glm(windnum ~ magn, data=shuttle, family=binomial)
summary(fit2)
fit2<-glm(windnum ~ windnum+magn, data=shuttle, family=binomial)
fit2<-glm(usenum ~ windnum+magn, data=shuttle, family=binomial)
summary(fit2)
fit2$coeff
exp(fit2$coeff)
fit3<-glm(usenum~windnum,data=shuttle,family=binomial)
fit4<-glm(I(1-usenum)~windnum,data=shuttle,family=binomial)
fit3$coeff
fit4$coeff
head(InsectSprays)
str(InsectSprays)
Ins<-subset(InsectSprays,spray=="A"|spray=="B")
str(Ins)
Ins$A<-Ins$spray=="A"
fit5<-glm(count~A,data=Ins,family=poisson)
summary(fit5)
exp(fit5$coeff)
relevel(InsectSpray$spray,"B")
head(InsectSpray$spray,)
head(InsectSpray$spray)
head(InsectSpray)
relevel(InsectSprays$spray,"B")
levels(InsectSprays$spray)
InsectSprays$spray
fit <- glm(count ~ relevel(spray, "B"), data = InsectSprays, family = poisson)
summary(fit)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
splineTerms
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,cex=2,bg="lightblue")
lines(x,yhat,col="red",lwd=2)
fitty<-lm(y~xMat-1)
summary(fitty)
xMat
y
swirl
library(swirl)
exit
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays,15)
sE
summary(InsectSprays[,2])
sapply(class(InsectSprays))
sapply(InsectSprays,FUN=class)
sapply(InsectSprays,class)
fit<-lm(count~spray)
fit<-lm(count~spray,data=InsectSprays)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray2,data=InsectSprays)
summary(fit2)$coeff
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,data=hunger)
summary(fit)$coef
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex="Female"])
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex=="Female",])
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],data=hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],data=hunger)
lmBoth<-lm(Numeric~Year+Sexdata=hunger)
lmBoth<-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,data=hunger)
summary(lmInter)
play()
str(out2)
head(out2)
out2
mean(out2)
mean(out2$y)
mean(out2$x)
nxt()
fit <- lm(y ~ x, out2)
plot(fit,which=1)
fitno<-lm(y<-x,out2[-1,])
fitno<-lm(y[-1,]<-x[-1,],out2)
fitno<-lm(out2$y[-1,]<-out2$x[-1,])
fitno<-lm(out2[-1,]$y<-out2[-1,]$x)
bullshit<-out2[-1,];fitno<-lm(y~x,bullshit)
play()
summary(fitno)
nxt()
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
play()
head(hatvalues(fit))
nxt()
play()
summary(fit)
fit
summary(fit)$resid
summary(fit)$standarderror
nxt()
sigma<-sqrt(0.4966/49)
play()
deviance(fit)
df.residual(fit)
nxt
nxt()
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-residual(fit)/(sigma*sqrt(1-hatvalues(fit)))
rstd<-fit$residual/(sigma*sqrt(1-hatvalues(fit)))
play()
rstd
rstandard(fit)
nxt()
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/df.residual(fit))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit, out2)
play()
str(dy)
nxt()
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(Swiss)
head(swiss)
mdl<-lm(Fertility~.,data=swiss)
vif(mdl)
mdl2<-lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,data=swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,data=swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,data=swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))
n<-(deviance(fit1)-deviance(fit3))/2
play()
deviance(fit1)
deviance(fit3)
d
nxt()
n/d
pf(n/d,2,43,lower.tail=FALSE)
play()
?pf
nxt()
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,family="binomial",data=ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
tail(hits)
class(hist[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, family=poisson, data=hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-glm(visits ~ date,offset=log(visits+1),data=hits,family=poisson)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(2014,"POST",dlweeks=1)
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(2014,"POST",dlweeks=1)
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(seg="POST",dlweeks=2,year=2014)
install.packages(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
head(training)
head(intrain)
head(inTrain)
dim(inTrain)
dim(spam)
3451/4601
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
install.packages("e1071")
install.packages("caret")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
head(training)
pairs(~.,data=training)
pairs(~.Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training,color=Species)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training,colour=Species)
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
?updateNumericInput()
?observe
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
?updateNumericInput
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
shiny::runApp('datascience coursera/Data Products/Lecture Notes Quizzes Project/project_shiny')
library(bitops)
library(RCurl)
setwd("datascience coursera")
dir()
setwd("Data Products")
dir()
setwd("Lecture Notes Quizzes Project")
dir()
setwd("project_shiny")
dir()
setwd("DataProductsProjectShiny")
dir()
setwd("WinProbDeck")
dir()
getwd()
